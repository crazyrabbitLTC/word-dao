{"fileName":"Counters.sol","contractName":"Counters","source":"pragma solidity ^0.5.0;\n\nimport \"../math/SafeMath.sol\";\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n * Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the SafeMath\n * overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never\n * directly accessed.\n */\nlibrary Counters {\n    using SafeMath for uint256;\n\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        counter._value += 1;\n    }\n\n    function decrement(Counter storage counter) internal {\n        counter._value = counter._value.sub(1);\n    }\n}\n","sourcePath":"openzeppelin-solidity/contracts/drafts/Counters.sol","sourceMap":"627:759:5:-;;132:2:-1;166:7;155:9;146:7;137:37;255:7;249:14;246:1;241:23;235:4;232:33;225:41;222:2;;;269:9;222:2;293:9;290:1;283:20;323:4;314:7;306:22;347:7;338;331:24;2:356","deployedSourceMap":"627:759:5:-;;;;;;;;;;;;;;","abi":[],"ast":{"absolutePath":"openzeppelin-solidity/contracts/drafts/Counters.sol","exportedSymbols":{"Counters":[634]},"id":635,"nodeType":"SourceUnit","nodes":[{"id":587,"literals":["solidity","^","0.5",".0"],"nodeType":"PragmaDirective","src":"0:23:5"},{"absolutePath":"openzeppelin-solidity/contracts/math/SafeMath.sol","file":"../math/SafeMath.sol","id":588,"nodeType":"ImportDirective","scope":635,"sourceUnit":830,"src":"25:30:5","symbolAliases":[],"unitAlias":""},{"baseContracts":[],"contractDependencies":[],"contractKind":"library","documentation":"@title Counters\n@author Matt Condon (@shrugs)\n@dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\nof elements in a mapping, issuing ERC721 ids, or counting request ids.\n * Include with `using Counters for Counters.Counter;`\nSince it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the SafeMath\noverflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never\ndirectly accessed.","fullyImplemented":true,"id":634,"linearizedBaseContracts":[634],"name":"Counters","nodeType":"ContractDefinition","nodes":[{"id":591,"libraryName":{"contractScope":null,"id":589,"name":"SafeMath","nodeType":"UserDefinedTypeName","referencedDeclaration":829,"src":"656:8:5","typeDescriptions":{"typeIdentifier":"t_contract$_SafeMath_$829","typeString":"library SafeMath"}},"nodeType":"UsingForDirective","src":"650:27:5","typeName":{"id":590,"name":"uint256","nodeType":"ElementaryTypeName","src":"669:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"canonicalName":"Counters.Counter","id":594,"members":[{"constant":false,"id":593,"name":"_value","nodeType":"VariableDeclaration","scope":594,"src":"1022:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":592,"name":"uint256","nodeType":"ElementaryTypeName","src":"1022:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"name":"Counter","nodeType":"StructDefinition","scope":634,"src":"683:374:5","visibility":"public"},{"body":{"id":604,"nodeType":"Block","src":"1137:38:5","statements":[{"expression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":601,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":596,"src":"1154:7:5","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$594_storage_ptr","typeString":"struct Counters.Counter storage pointer"}},"id":602,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":593,"src":"1154:14:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":600,"id":603,"nodeType":"Return","src":"1147:21:5"}]},"documentation":null,"id":605,"implemented":true,"kind":"function","modifiers":[],"name":"current","nodeType":"FunctionDefinition","parameters":{"id":597,"nodeType":"ParameterList","parameters":[{"constant":false,"id":596,"name":"counter","nodeType":"VariableDeclaration","scope":605,"src":"1080:23:5","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$594_storage_ptr","typeString":"struct Counters.Counter"},"typeName":{"contractScope":null,"id":595,"name":"Counter","nodeType":"UserDefinedTypeName","referencedDeclaration":594,"src":"1080:7:5","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$594_storage_ptr","typeString":"struct Counters.Counter"}},"value":null,"visibility":"internal"}],"src":"1079:25:5"},"returnParameters":{"id":600,"nodeType":"ParameterList","parameters":[{"constant":false,"id":599,"name":"","nodeType":"VariableDeclaration","scope":605,"src":"1128:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":598,"name":"uint256","nodeType":"ElementaryTypeName","src":"1128:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"1127:9:5"},"scope":634,"src":"1063:112:5","stateMutability":"view","superFunction":null,"visibility":"internal"},{"body":{"id":616,"nodeType":"Block","src":"1234:36:5","statements":[{"expression":{"argumentTypes":null,"id":614,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":610,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":607,"src":"1244:7:5","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$594_storage_ptr","typeString":"struct Counters.Counter storage pointer"}},"id":612,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":593,"src":"1244:14:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"argumentTypes":null,"hexValue":"31","id":613,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1262:1:5","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1244:19:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":615,"nodeType":"ExpressionStatement","src":"1244:19:5"}]},"documentation":null,"id":617,"implemented":true,"kind":"function","modifiers":[],"name":"increment","nodeType":"FunctionDefinition","parameters":{"id":608,"nodeType":"ParameterList","parameters":[{"constant":false,"id":607,"name":"counter","nodeType":"VariableDeclaration","scope":617,"src":"1200:23:5","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$594_storage_ptr","typeString":"struct Counters.Counter"},"typeName":{"contractScope":null,"id":606,"name":"Counter","nodeType":"UserDefinedTypeName","referencedDeclaration":594,"src":"1200:7:5","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$594_storage_ptr","typeString":"struct Counters.Counter"}},"value":null,"visibility":"internal"}],"src":"1199:25:5"},"returnParameters":{"id":609,"nodeType":"ParameterList","parameters":[],"src":"1234:0:5"},"scope":634,"src":"1181:89:5","stateMutability":"nonpayable","superFunction":null,"visibility":"internal"},{"body":{"id":632,"nodeType":"Block","src":"1329:55:5","statements":[{"expression":{"argumentTypes":null,"id":630,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":622,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":619,"src":"1339:7:5","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$594_storage_ptr","typeString":"struct Counters.Counter storage pointer"}},"id":624,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":593,"src":"1339:14:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"hexValue":"31","id":628,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1375:1:5","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"expression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":625,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":619,"src":"1356:7:5","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$594_storage_ptr","typeString":"struct Counters.Counter storage pointer"}},"id":626,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":593,"src":"1356:14:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":627,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sub","nodeType":"MemberAccess","referencedDeclaration":748,"src":"1356:18:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":629,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1356:21:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1339:38:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":631,"nodeType":"ExpressionStatement","src":"1339:38:5"}]},"documentation":null,"id":633,"implemented":true,"kind":"function","modifiers":[],"name":"decrement","nodeType":"FunctionDefinition","parameters":{"id":620,"nodeType":"ParameterList","parameters":[{"constant":false,"id":619,"name":"counter","nodeType":"VariableDeclaration","scope":633,"src":"1295:23:5","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$594_storage_ptr","typeString":"struct Counters.Counter"},"typeName":{"contractScope":null,"id":618,"name":"Counter","nodeType":"UserDefinedTypeName","referencedDeclaration":594,"src":"1295:7:5","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$594_storage_ptr","typeString":"struct Counters.Counter"}},"value":null,"visibility":"internal"}],"src":"1294:25:5"},"returnParameters":{"id":621,"nodeType":"ParameterList","parameters":[],"src":"1329:0:5"},"scope":634,"src":"1276:108:5","stateMutability":"nonpayable","superFunction":null,"visibility":"internal"}],"scope":635,"src":"627:759:5"}],"src":"0:1387:5"},"bytecode":"0x605e6026600b82828239805160001a6073141515601857fe5b30600052607381538281f350fe73000000000000000000000000000000000000000030146080604052600436106023575b60006000fdfea265627a7a72305820007ea850cd5cf0a5346b84200fd7e5caef053fa7108b43bdee86b59a5435123564736f6c634300050a0032","deployedBytecode":"0x73000000000000000000000000000000000000000030146080604052600436106023575b60006000fdfea265627a7a72305820007ea850cd5cf0a5346b84200fd7e5caef053fa7108b43bdee86b59a5435123564736f6c634300050a0032","compiler":{"name":"solc","version":"0.5.10+commit.5a6ea5b1.Emscripten.clang","optimizer":{},"evmVersion":"constantinople"}}
